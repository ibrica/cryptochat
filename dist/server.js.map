{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":";;AAIA,+BAAwB;AACxB,6BAA6B;AAC7B,yCAAqC;AACrC,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,mBAAmB,CAAC,CAAC;AAEpD;;GAEG;AAEH,MAAM,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,CAAC;AACvD,aAAG,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;AAGtB;;GAEG;AAEH,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,aAAG,CAAC,CAAC;AAEtC;;GAEG;AAEH,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACpB,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAC5B,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;AAEpC,iBAAiB;AACjB,mBAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AAE3B;;GAEG;AAEH,SAAS,aAAa,CAAC,GAAG;IACxB,IAAI,IAAI,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;IAEzB,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;QACf,aAAa;QACb,OAAO,GAAG,CAAC;KACZ;IAED,IAAI,IAAI,IAAI,CAAC,EAAE;QACb,cAAc;QACd,OAAO,IAAI,CAAC;KACb;IAED,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;GAEG;AAEH,SAAS,OAAO,CAAC,KAAK;IACpB,IAAI,KAAK,CAAC,OAAO,KAAK,QAAQ,EAAE;QAC9B,MAAM,KAAK,CAAC;KACb;IAED,IAAI,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ;QACjC,CAAC,CAAC,OAAO,GAAG,IAAI;QAChB,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC;IAEnB,uDAAuD;IACvD,QAAQ,KAAK,CAAC,IAAI,EAAE;QAClB,KAAK,QAAQ;YACX,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,+BAA+B,CAAC,CAAC;YACtD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,MAAM;QACR,KAAK,YAAY;YACf,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC;YAC3C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAChB,MAAM;QACR;YACE,MAAM,KAAK,CAAC;KACf;AACH,CAAC;AAED;;GAEG;AAEH,SAAS,WAAW;IAClB,IAAI,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;IAC5B,IAAI,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ;QACjC,CAAC,CAAC,OAAO,GAAG,IAAI;QAChB,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;IACxB,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC,CAAC;AAChC,CAAC;AAED,kBAAe,MAAM,CAAC","sourcesContent":["/**\n * Module dependencies.\n */\nimport {Application} from 'express';\nimport app from './app';\nimport * as http from 'http';\nimport {SocketIO} from  './socketio';\nconst debug = require('debug')('cryptochat:server');\n\n/**\n * Get port from environment and store in Express.\n */\n\nconst port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\n\n/**\n * Create HTTP server.\n */\n\nconst server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n// start socketio\nSocketIO.bootstrap(server);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  let port = parseInt(val);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  let bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  let addr = server.address();\n  let bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n\nexport default server;"]}