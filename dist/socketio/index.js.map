{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/socketio/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Start and configure socket.io\n */\nimport * as socketIO from 'socket.io' \nimport * as os from 'os'\nimport {Server} from 'http';\n\nlet io:SocketIO.Server; //\n\nexport class SocketIO{\n\n  public static bootstrap =  (httpServer:Server):void => {\n    new SocketIO(httpServer);\n  };\n\n\n\n  constructor (httpServer:Server){\n      io = socketIO(httpServer, {});\n    \n      io.sockets.on('connection', this.configSocket)\n  }\n\n  private configSocket(socket){\n    // convenience function to log server messages on the client\n    function log(...args: any[]) {\n      let array:Array<any> = ['Message from server:']\n      array.push.apply(array, args);\n      socket.emit('log', array);\n    }\n  \n    socket.on('message', (message) =>{\n      log('Client said: ', message);\n      // for a real app, would be room-only (not broadcast)\n      socket.broadcast.emit('message', message);\n    });\n  \n    socket.on('create or join', (room) => {\n      log('Received request to create or join room ' + room);\n  \n      let clientsInRoom = io.sockets.adapter.rooms[room];\n      let numClients = clientsInRoom ? Object.keys(clientsInRoom.sockets).length : 0;\n      log('Room ' + room + ' now has ' + numClients + ' client(s)');\n  \n      if (numClients === 0) {\n        socket.join(room);\n        log('Client ID ' + socket.id + ' created room ' + room);\n        socket.emit('created', room, socket.id);\n  \n      } else if (numClients === 1) {\n        log('Client ID ' + socket.id + ' joined room ' + room);\n        io.sockets.in(room).emit('join', room);\n        socket.join(room);\n        socket.emit('joined', room, socket.id);\n        io.sockets.in(room).emit('ready');\n      } else { // max two clients\n        socket.emit('full', room);\n      }\n    });\n  \n    socket.on('ipaddr', () => {\n      var ifaces = os.networkInterfaces();\n      for (var dev in ifaces) {\n        ifaces[dev].forEach((details) => {\n          if (details.family === 'IPv4' && details.address !== '127.0.0.1') {\n            socket.emit('ipaddr', details.address);\n          }\n        });\n      }\n    });\n  \n    socket.on('bye', () => {\n      console.log('received bye');\n    });  \n  }\n}\n"]}